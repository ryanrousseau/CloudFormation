AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
  WebInstanceName:
    Type: String
    Default: WebInstance
  WebInstanceTypeParameter:
    Type: String
    Default: t2.large
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
  AvailabilityZoneParameter:
    Description: Enter availability zone. Default is us-west-2a.
    Type: String
    Default: us-west-2a
    AllowedValues:
      - us-west-2a
      - us-west-2b
      - us-west-2c
  DatabaseName:
    Description: Enter Database Name
    Type: String
  DatabaseUsername:
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must contain only alphanumeric characters.
    Description: The database admin account user name.
    MaxLength: '16'
    MinLength: '1'
    Type: String
  DatabasePassword:
    AllowedPattern: "^(?=.*[0-9])(?=.*[a-zA-Z])([a-zA-Z0-9]+)"
    ConstraintDescription: Must contain only alphanumeric characters with at least one capital letter and one number.
    Description: The database admin account password.
    MaxLength: '41'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        -
          Key: Name
          Value: OctopusDemoVPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZoneParameter
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2b
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA
  SQLServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SQL Server Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '1433'
        ToPort: '1433'
        CidrIp: 0.0.0.0/0
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: CloudFormation managed DB subnet group
      SubnetIds: [!Ref SubnetA, !Ref SubnetB]
  SQLDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      VPCSecurityGroups:
      - Fn::GetAtt:
        - SQLServerSecurityGroup
        - GroupId
      DBInstanceIdentifier:
        Ref: DatabaseName
      LicenseModel: license-included
      Engine: sqlserver-ex
      EngineVersion: 14.00.3015.40.v1
      MultiAZ: false
      DBInstanceClass: db.t2.small
      AllocatedStorage: '20'
      MasterUsername:
        Ref: DatabaseUsername
      MasterUserPassword:
        Ref: DatabasePassword
      PubliclyAccessible: 'true'
      Tags:
        -
          Key: "Name"
          Value: "sqlmaster"
        -
          Key: "project"
          Value: "development unittest"
      BackupRetentionPeriod: '1'
    DependsOn: SQLServerSecurityGroup
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable RDP access
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3389'
        ToPort: '3389'
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: '10933'
        ToPort: '10933'
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: '8088'
        ToPort: '8088'
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: '0.0.0.0/0'
  WebInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-f3dcbc8b
      SubnetId: !Ref SubnetA
      InstanceType:
        Ref: WebInstanceTypeParameter
      SecurityGroupIds:
        - Ref: InstanceSecurityGroup
      KeyName: !Ref KeyPair
      Tags:
        -
          Key: Name
          Value: !Ref WebInstanceName
      UserData:
        Fn::Base64: !Join
          - ''
          -
            - |-
              <powershell>
              Start-Transcript -path "C:\Bootstrap.txt" -append

              Write-Host "Configure IIS"
              Dism /Online /Enable-Feature /FeatureName:IIS-ASPNET /All
              Dism /Online /Enable-Feature /FeatureName:IIS-ASPNET45 /All
              Dism /Online /Enable-Feature /FeatureName:IIS-CertProvider /All
              Dism /Online /Enable-Feature /FeatureName:IIS-HttpRedirect /All
              Dism /Online /Enable-Feature /FeatureName:IIS-BasicAuthentication /All
              Dism /Online /Enable-Feature /FeatureName:IIS-WebSockets /All
              Dism /Online /Enable-Feature /FeatureName:IIS-ApplicationInit /All
              Dism /Online /Enable-Feature /FeatureName:IIS-CustomLogging /All
              Dism /Online /Enable-Feature /FeatureName:IIS-ManagementService /All
              Dism /Online /Enable-Feature /FeatureName:WCF-Services45 /All
              Dism /Online /Enable-Feature /FeatureName:WCF-HTTP-Activation45 /All
              Dism /Online /Enable-Feature /FeatureName:IIS-WindowsAuthentication /All
              Dism /online /enable-feature /featurename:NetFX3 /All

              Write-Output Delete Default Web Site
              Remove-WebSite -Name "Default Web Site"

              Write-Output "Open port 8088 on Windows Firewall"
              & netsh.exe firewall add portopening TCP 8088 "Trading Website"

              $tentacleDownloadPath = "https://octopus.com/downloads/latest/WindowsX64/OctopusTentacle"
              $octopusServerUrl = "#{OctopusUrl}"
              $octopusApiKey = "#{OctopusApiKey}"
              $octopusServerThumbprint = "#{OctopusServerThumbprint}"
              $registerInEnvironments = "#{OctopusEnvironment}"
              $registerInRoles = "#{OctopusRoles}"
              $tentacleListenPort = 10933
              $tentacleHomeDirectory = "C:\Octopus"
              $tentacleAppDirectory = "C:\Octopus\Applications"
              $tentacleConfigFile = "C:\Octopus\Tentacle\Tentacle.config"

              $tentaclePath = "C:\Tools\Octopus.Tentacle.msi"

              function Get-MyPublicIPAddress {
                  # Get Ip Address of Machine
                  Write-Host "Getting public IP address"
                  $ipAddress = Invoke-RestMethod http://ipinfo.io/json | Select-Object -exp ip
                  return $ipAddress
              }

              function Get-FileFromServer
              {
                param (
                  [string]$url,
                  [string]$saveAs
                )

                Write-Host "Downloading $url to $saveAs"
                [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
                $downloader = new-object System.Net.WebClient
                $downloader.DownloadFile($url, $saveAs)
              }

              function Install-Tentacle
              {
                param (
                   [Parameter(Mandatory=$True)]
                   [string]$apiKey,
                   [Parameter(Mandatory=$True)]
                   [System.Uri]$octopusServerUrl,
                   [Parameter(Mandatory=$True)]
                   [string]$environment,
                   [Parameter(Mandatory=$True)]
                   [string]$roles
                )

                Write-Output "Beginning Tentacle installation"

                Write-Output "Downloading latest Octopus Tentacle MSI..."

                $roles = $roles -split "," | foreach { "--role `"$($_.Trim())`"" }
                $roles = $roles -join " "

                Write-Output "Roles = $roles"

                $tentaclePath = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath(".\Tentacle.msi")
                if ((test-path $tentaclePath) -ne $true) {
                  Get-FileFromServer $tentacleDownloadPath $tentaclePath
                }

                Write-Output "Installing MSI"
                $msiExitCode = (Start-Process -FilePath "msiexec.exe" -ArgumentList "/i Tentacle.msi /quiet" -Wait -Passthru).ExitCode
                Write-Output "Tentacle MSI installer returned exit code $msiExitCode"
                if ($msiExitCode -ne 0) {
                  throw "Installation aborted"
                }

                Write-Output "Open port $tentacleListenPort on Windows Firewall"
                & netsh.exe firewall add portopening TCP $tentacleListenPort "Octopus Tentacle"
                if ($lastExitCode -ne 0) {
                  throw "Installation failed when modifying firewall rules"
                }

                $ipAddress = Get-MyPublicIPAddress
                $ipAddress = $ipAddress.Trim()

                Write-Output "Public IP address: " + $ipAddress

                Write-Output "Configuring and registering Tentacle"

                Set-Location "${env:ProgramFiles}\Octopus Deploy\Tentacle"

                & .\tentacle.exe create-instance --instance "Tentacle" --config $tentacleConfigFile --console | Write-Host
                if ($lastExitCode -ne 0) {
                  throw "Installation failed on create-instance"
                }
                & .\tentacle.exe configure --instance "Tentacle" --home $tentacleHomeDirectory --console | Write-Host
                if ($lastExitCode -ne 0) {
                  throw "Installation failed on configure"
                }
                & .\tentacle.exe configure --instance "Tentacle" --app $tentacleAppDirectory --console | Write-Host
                if ($lastExitCode -ne 0) {
                  throw "Installation failed on configure"
                }
                & .\tentacle.exe configure --instance "Tentacle" --port $tentacleListenPort --console | Write-Host
                if ($lastExitCode -ne 0) {
                  throw "Installation failed on configure"
                }
                & .\tentacle.exe new-certificate --instance "Tentacle" --console | Write-Host
                if ($lastExitCode -ne 0) {
                  throw "Installation failed on creating new certificate"
                }
                & .\tentacle.exe configure --instance "Tentacle" --trust $octopusServerThumbprint --console  | Write-Host
                if ($lastExitCode -ne 0) {
                  throw "Installation failed on configure"
                }
                
                $cmd = "& .\tentacle.exe register-with --instance `"Tentacle`" --server $octopusServerUrl --environment $environment $roles --name $env:COMPUTERNAME --publicHostName $ipAddress --apiKey $apiKey --comms-style TentaclePassive --force --console"
                Invoke-Expression $cmd | Write-Host
                if ($lastExitCode -ne 0) {
                  throw "Installation failed on register-with"
                }

                & .\tentacle.exe service --instance "Tentacle" --install --start --console | Write-Host
                if ($lastExitCode -ne 0) {
                  throw "Installation failed on service install"
                }

                Write-Output "Tentacle commands complete"
              }

              # Set Environment Variable for ASP.NET CORE
              [Environment]::SetEnvironmentVariable("ASPNETCORE_ENVIRONMENT", "$registerInEnvironments", "Machine")

              # Install tentacle now ...
              Install-Tentacle -apikey $octopusApiKey -octopusServerUrl $octopusServerUrl -environment $registerInEnvironments -roles $registerInRoles
              </powershell>
  WebElasticIp:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
        InstanceId: !Ref WebInstance
Outputs:
  VPCID:
    Value: !Ref VPC
    Description: VPC ID
  SubnetAID:
    Value: !Ref SubnetA
    Description: Subnet A ID
  PublicIp:
    Value:
      Fn::GetAtt:
      - WebInstance
      - PublicIp
    Description: Server's PublicIp Address
  WebEndpoint:
    Description: Web instance endpoint
    Value:
      Fn::GetAtt:
      - WebInstance
      - PublicDnsName
  SQLDatabaseEndpoint:
    Description: Database endpoint
    Value: !Sub "${SQLDatabase.Endpoint.Address}"